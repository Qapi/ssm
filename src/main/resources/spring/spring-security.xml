<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:context="http://www.springframework.org/schema/context"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-3.2.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-4.0.xsd">


    <http pattern="/login" security="none"/>
    <http pattern="/sessionException" security="none"/>
    <http pattern="/captcha" security="none"/>
    <http pattern="/error" security="none"/>
    <http pattern="/denied" security="none"/>
    <http pattern="/notFound" security="none"/>
    <http pattern="/ws/**" security="none"/>
    <http pattern="/base/**" security="none"/>
    <http pattern="/upload/**" security="none"/>
    <http pattern="/assets/**" security="none"/>
    
    
    <http access-denied-page="/denied" auto-config="false" use-expressions="false" entry-point-ref="authenticationProcessingFilterEntryPoint">
    
        <intercept-url pattern="/merchant/**" access="ROLE_MERCHANT" />
        <intercept-url pattern="/**" access="ROLE_ADMIN" />
        
        <logout logout-url="/logout" success-handler-ref="customLogoutFilter"/>
        
         <!-- 
        	免登录
        	默认是存cookie
        	如果添加 data-source-ref 属性, 则是添加到数据库, 并且需要创建相关表
        -->
        <remember-me data-source-ref="dataSource" remember-me-parameter="remember-me"/>

        <!-- 
            session-fixation-protection 
                                    值为:migrateSession
         	 防止伪造sessionid攻击. 用户登录成功后会销毁用户当前的session. 创建新的session,并把用户信息复制到新session中.
                                    
            invalid-session-url 会话失效时跳转的页面
        -->
        <session-management invalid-session-url="/sessionException?msg=SESSION.INVALID" session-fixation-protection="migrateSession" >
            <!-- 
            	配置同一用户多次登录的情况, 需要重写UserDetailsServiceImpl实现类loadUserByUsername方法返回的User重写equals和hashCode, 
            	还需要在 web.xml中配置 org.springframework.security.web.session.HttpSessionEventPublisher 监听器
            	 
            	max-sessions=1  配置同一用户最多可以同时登录多少次,超出后根据 error-if-maximum-exceeded 来处理
            	
            	error-if-maximum-exceeded 值为true时，如果一个用户已经登录，然后又进行登录,则无法登陆，
    									      值为false时，如果一个用户已经登录，然后又进行登录,则将踢掉上一个用户。
    									      
				expired-url 表示被提出的用户跳转到那个页面
            -->
            <concurrency-control max-sessions="1" error-if-maximum-exceeded="false" expired-url="/sessionException?msg=SESSION.MULTI"/>
        </session-management>
        
        <!-- 自定义的登陆拦截器 -->
    	<custom-filter ref="loginFilter" position="FORM_LOGIN_FILTER" />  
    </http>
    
    <!-- 登陆点 -->
 	<beans:bean id="authenticationProcessingFilterEntryPoint" class="com.FangBianMian.security.LoginPageEntryPoint">  
        <beans:property name="loginPageStrategy" ref="urlMappingLoginPageStrategy"></beans:property>  
    </beans:bean>  
    
    <!-- 登陆点实现策略 -->
	<beans:bean id="urlMappingLoginPageStrategy" class="com.FangBianMian.security.UrlMappingLoginPageStrategy"/>

	<!-- 自定义的登陆拦截器 -->
    <beans:bean id="loginFilter" class="com.FangBianMian.security.LoginFilter">  
        <beans:property name="filterProcessesUrl" value="/authentication"></beans:property>  
        <beans:property name="usernameParameter" value="j_username"></beans:property>
        <beans:property name="passwordParameter" value="j_password"></beans:property>
        <beans:property name="authenticationFailureHandler" ref="loginFailureHandler"></beans:property>  
        <beans:property name="authenticationSuccessHandler" ref="loginSuccessHandler"></beans:property>  
        <beans:property name="authenticationManager" ref="authenticationManager"></beans:property>  
    </beans:bean>  

	<!-- 验证管理器 -->
    <authentication-manager alias="authenticationManager">
        <authentication-provider ref="authenticationProvider"></authentication-provider>
    </authentication-manager>
    
	<!-- 验证提供者 -->
	<beans:bean id="authenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
        <beans:property name="userDetailsService" ref="userDetailsService" />
        <beans:property name="passwordEncoder" ref="passwordEncoder" />
    </beans:bean>
	
	<!-- 登录验证处理类 -->
	<beans:bean id="userDetailsService" class="com.FangBianMian.security.UserDetailsServiceImpl" />

	<!-- 给提交过来的密码加密 -->
 	<beans:bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

	<!-- 登录成功业务处理 -->
 	<beans:bean id="loginSuccessHandler" class="com.FangBianMian.security.LoginSuccessHandler">  
        <!-- 可以配置相应的跳转方式。属性forwardToDestination为true采用forward false(默认)为sendRedirect -->  
    </beans:bean>  
    
    <!-- 登陆失败处理器 -->
    <beans:bean id="loginFailureHandler" class="com.FangBianMian.security.LoginFailureHandler">  
        <!-- 可以配置相应的跳转方式。属性forwardToDestination为true采用forward false(默认)为sendRedirect -->  
        <beans:property name="forwardToDestination" value="false"></beans:property>
    </beans:bean> 
    
    <!-- 登出处理器 -->
    <beans:bean id="customLogoutFilter" class="com.FangBianMian.security.LogoutSuccessHandler">
    	<beans:property name="targetUrlParameter" value="lp"></beans:property>
    </beans:bean>
</beans:beans>